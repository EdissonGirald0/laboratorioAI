# Eliminar la línea de versión
# version: '3.8'

networks:
  laboratorio_ai:
    name: laboratorio_ai
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/postgres/data
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/qdrant/data
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/ollama/data
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/n8n/data
  floowise_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/floowise/data
  openwebui_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/openwebui/data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/redis/data

# Templates para servicios reutilizables
x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['laboratorio_ai']
  environment:
    - NODE_ENV=development
    - N8N_PROTOCOL=http
    - N8N_HOST=localhost
    - N8N_PORT=5678
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_USER_MANAGEMENT_DISABLED=true
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_ENCRYPTION_KEY}
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_BULL_REDIS_PORT=6379
    - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_HEALTH_CHECK_ACTIVE=true
  env_file:
    - path: .env
      required: true

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - laboratorio_ai
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Servicio para importar datos iniciales de N8N
  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 10 && n8n import:credentials --separate --input=/workflows || true && n8n import:workflow --separate --input=/workflows || true"
    volumes:
      - ./n8n/workflows:/workflows
      - ./n8n/credentials:/credentials
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Servicio principal de N8N
  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
      - ./n8n/credentials:/home/node/.n8n/credentials
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    extra_hosts:
      - "host.docker.internal:host-gateway"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    env_file:
      - .env
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - laboratorio_ai
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - laboratorio_ai
    extra_hosts:
      - "host.docker.internal:host-gateway"

  openwebui:
    image: ghcr.io/open-webui/open-webui:v0.6.13
    container_name: openwebui
    env_file:
      - .env
    environment:
      - DATABASE_URL=sqlite:////app/data/openwebui.db
      - OLLAMA_API_BASE_URL=http://host.docker.internal:11434/api
      - OLLAMA_HOST=host.docker.internal
      - OLLAMA_PORT=11434
    ports:
      - "8080:8080"
    volumes:
      - openwebui_data:/app/data
    depends_on:
      - ollama
    networks:
      - laboratorio_ai
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - laboratorio_ai
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  floowise:
    build: ./floowise
    container_name: floowise
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - floowise_data:/app/data
    depends_on:
      - postgres
      - qdrant
    networks:
      - laboratorio_ai
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway" 